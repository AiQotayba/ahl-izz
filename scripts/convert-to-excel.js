const fs = require('fs');
const path = require('path');
const ExcelJS = require('exceljs');

// ูุณุงุฑ ููู ุงูุจูุงูุงุช
const dataPath = path.join(__dirname, './data/aleppo.pledges.json');
const outputPath = path.join(__dirname, './output/end.xlsx');

// ุฅูุดุงุก ูุฌูุฏ ุงูุฅุฎุฑุงุฌ ุฅุฐุง ูู ููู ููุฌูุฏุงู
const outputDir = path.dirname(outputPath);
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

async function convertToExcel() {
  try {
    console.log('๐ start convert to excel...');
    
    // ูุฑุงุกุฉ ููู ุงูุจูุงูุงุช
    console.log('๐ read data file...');
    const rawData = fs.readFileSync(dataPath, 'utf8');
    
    // ุชุญููู ุงูุจูุงูุงุช
    let pledges;
    try {
      // ูุญุงููุฉ ุชุญููู ูู JSON array
      pledges = JSON.parse(rawData);
      
      // ุฅุฐุง ูู ููู arrayุ ุชุญููู ุฅูู array
      if (!Array.isArray(pledges)) {
        pledges = [pledges];
      }
    } catch (error) {
      console.error('โ error in parsing data file:', error.message);
      return;
    }
    
    console.log(`๐ found ${pledges.length} pledges`);
    
    // ุฅูุดุงุก workbook ุฌุฏูุฏ
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet('pledges');
    
    // ุฅุถุงูุฉ headers
    console.log('๐ add headers...');
    worksheet.addRow([
      'number',
      'name',
      'phone number',
      'amount',
      'payment method',
      'pledge status',
      'created at',
      'updated at'
    ]);
    
    // ุชูุณูู headers
    const headerRow = worksheet.getRow(1);
    headerRow.font = { 
      bold: true, 
      color: { argb: 'FFFFFFFF' },
      size: 12
    };
    headerRow.fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FF2E7D32' } // dark green
    };
    headerRow.alignment = { 
      horizontal: 'center', 
      vertical: 'middle' 
    };
    
    // add data
    console.log('๐ add data...');
    pledges.forEach((pledge, index) => {
      const row = worksheet.addRow([
        index + 1,
        pledge.fullName || 'ุบูุฑ ูุญุฏุฏ',
        pledge.phoneNumber || 'ุบูุฑ ูุญุฏุฏ',
        pledge.amount || 0,
        pledge.paymentMethod === 'received' ? 'ูุณุชูู' : 
        pledge.paymentMethod === 'pledged' ? 'ูุชุนูุฏ' : 'ุบูุฑ ูุญุฏุฏ',
        pledge.pledgeStatus === 'confirmed' ? 'ูุคูุฏ' : 
        pledge.pledgeStatus === 'pending' ? 'ูุนูู' : 'ูุฑููุถ',
        pledge.createdAt ? new Date(pledge.createdAt.$date || pledge.createdAt).toLocaleDateString('ar-SA') : 'ุบูุฑ ูุญุฏุฏ',
        pledge.updatedAt ? new Date(pledge.updatedAt.$date || pledge.updatedAt).toLocaleDateString('ar-SA') : 'ุบูุฑ ูุญุฏุฏ'
      ]);
      
      // ุชูุณูู ุงูุตููู
      row.alignment = { 
        horizontal: 'center', 
        vertical: 'middle' 
      };
      
      // ุชูููู ุงูุตููู ุจุงูุชูุงูุจ
      if (index % 2 === 0) {
        row.fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: 'FFF8F9FA' } // ุฑูุงุฏู ูุงุชุญ
        };
      }
    });
    
    // ุชูุณูู ุงูุฃุนูุฏุฉ
    console.log('๐จ format columns...');
    worksheet.columns.forEach((column, index) => {
      column.width = index === 0 ? 8 : index === 1 ? 20 : index === 2 ? 15 : index === 3 ? 12 : 15;
    });
    
    // add borders
    worksheet.eachRow((row, rowNumber) => {
      row.eachCell((cell, colNumber) => {
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' }
        };
      });
    });
    
    // add statistics in separate worksheet
    console.log('๐ add statistics...');
    const statsWorksheet = workbook.addWorksheet('ุงูุฅุญุตุงุฆูุงุช');
    
    // ุญุณุงุจ ุงูุฅุญุตุงุฆูุงุช
    const totalPledges = pledges.length;
    const confirmedPledges = pledges.filter(p => p.pledgeStatus === 'confirmed').length;
    const pendingPledges = pledges.filter(p => p.pledgeStatus === 'pending').length;
    const rejectedPledges = pledges.filter(p => p.pledgeStatus === 'rejected').length;
    const totalAmount = pledges.reduce((sum, p) => sum + (p.amount || 0), 0);
    const receivedAmount = pledges
      .filter(p => p.paymentMethod === 'received' && p.pledgeStatus === 'confirmed')
      .reduce((sum, p) => sum + (p.amount || 0), 0);
    
    // ุฅุถุงูุฉ ุงูุฅุญุตุงุฆูุงุช
    statsWorksheet.addRow(['ุงูุฅุญุตุงุฆูุงุช', 'ุงููููุฉ']);
    statsWorksheet.addRow(['ุฅุฌูุงูู ุงูุชุจุฑุนุงุช', totalPledges]);
    statsWorksheet.addRow(['ุงูุชุจุฑุนุงุช ุงููุคูุฏุฉ', confirmedPledges]);
    statsWorksheet.addRow(['ุงูุชุจุฑุนุงุช ุงููุนููุฉ', pendingPledges]);
    statsWorksheet.addRow(['ุงูุชุจุฑุนุงุช ุงููุฑููุถุฉ', rejectedPledges]);
    statsWorksheet.addRow(['ุฅุฌูุงูู ุงููุจูุบ', totalAmount.toLocaleString()]);
    statsWorksheet.addRow(['ุงููุจูุบ ุงููุณุชูู', receivedAmount.toLocaleString()]);
    statsWorksheet.addRow(['ุงููุจูุบ ุงููุชุจูู', (totalAmount - receivedAmount).toLocaleString()]);
    
    // ุชูุณูู ูุฑูุฉ ุงูุฅุญุตุงุฆูุงุช
    statsWorksheet.columns.forEach(column => {
      column.width = 20;
    });
    
    // ุญูุธ ุงูููู
    console.log('๐พ ุญูุธ ุงูููู...');
    await workbook.xlsx.writeFile(outputPath);
    
    console.log('โ ุชู ุชุญููู ุงูุจูุงูุงุช ุจูุฌุงุญ!');
    console.log(`๐ ุงูููู ูุญููุธ ูู: ${outputPath}`);
    console.log(`๐ ุฅุฌูุงูู ุงูุชุจุฑุนุงุช: ${totalPledges}`);
    console.log(`๐ฐ ุฅุฌูุงูู ุงููุจูุบ: ${totalAmount.toLocaleString()}`);
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุชุญููู ุงูุจูุงูุงุช:', error.message);
    console.error(error.stack);
  }
}

// ุชุดุบูู ุงูุณูุฑุจุช
convertToExcel();
